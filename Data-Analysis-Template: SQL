# Data-Analysis-Template
This repository contains code snippets from my Data Science work in SQL

*Some basics to remember*
SQL keywords are NOT case sensitive: select is the same as SELECT
Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.

*Some of The Most Important SQL Commands*
SELECT - extracts data from a database : The data returned is stored in a result table, called result-set.      
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

SQL SELECT:
   SELECT column1, column2 FROM table1; (selects only specified fields) or
   SELECT*FROM table1; (selects all the fields)
SQL DISTINCT:
   SELECT DISTINCT column1,cplumn2 FROM table1; : return only distinct (different) values.
   SELECT COUNT(DISTINCT column1,column2) FROM table1; :lists the number of distinct values 
SQL WHERE:   
   SELECT column1,column2 FROM table1 WHERE value= 'A' or 1 ; :filters records, used to extract only those records that fulfill a specified condition. 
   Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!
SQL AND, OR, and NOT Operators:
   SELECT column1, column2 From table1 WHERE value='A'AND value='B'AND value=1;
   SELECT column1, column2 From table1 WHERE value='A'OR value='B'OR value=1;
   SELECT column1, column2 From table1 WHERE NOT value='A';
SQL Combining AND, OR, NOT (use parenthesis to form complex expressions)
   SELECT * FROM table1 WHERE/WHERE NOT column='A' AND (value=1 OR value=2)
   
SQL ORDER BY Keyword: 
   Sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
   SELECT column1, column2 FROM table1 ORDER BY column1, column2 ASC/DESC;
   SELECT * FROM table1 ORDER BY Country, CostumerName;

SQL Insert Into: 
   It is possible to write the INSERT INTO statement in two ways:
   1)Specify both the column names and the values to be inserted
     - INSERT INTO table1 (column1,column2...) VALUES (value1, value2...);
   2)If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.However, 
     make sure the order of the values is in the same order as the columns in the table.
     - INSERT INTO table1 VALUES (value1, value2)
 
 SQL NULL Values:
   Test for NULL Values: use the IS NULL and IS NOT NULL operators.
   -IS NULL Syntex : SELECT column1 FROM table1 WHERE columne_name IS NULL;
   -IS NOT NULL Syntex :SELECT column1 FROM table1 WHERE columne_name IS NOT NULL;
 
 SQL UPDATE Statement:
   It is used to modify the existing records in a table. 
   Note : Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. 
   The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!
   - UPDATE table1 SET column1, column2 WHERE condition
   - UPDATE table1 SET name='x', age='Y' SET city='z'
   UPDATE Multiple Records:It is the WHERE clause that determines how many records will be updated.
   - Update table1 SET city='z' WHERE name='x'
   - UPDATE table1 SET city='z' #Updates all the records in table1
 
 SQL DELETE Statement:
   It is used to delete existing records in a table.
   Note:Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. 
   The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!
   - DELETE FROM table1 WHERE value=1/'A';
   - DELETE FROM table1; #delete all records
   
 SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause:
   It is used to specify the number of records to return.
   SELECT TOP number/percent column_name(s) FROM table1 WHERE condition:
   SELECT TOP 3 * FROM Customers;
   SELECT TOP 50 PERCENT * FROM table1;
   SELECT TOP 3 * FROM Customers WHERE Country='x';
 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
