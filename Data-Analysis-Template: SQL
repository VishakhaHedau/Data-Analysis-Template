# Data-Analysis-Template
This repository contains code snippets from my Data Science work in SQL

*Some basics to remember*
SQL keywords are NOT case sensitive: select is the same as SELECT
Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.

*Some of The Most Important SQL Commands*
SELECT - extracts data from a database : The data returned is stored in a result table, called result-set.      
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

SELECT:
   SELECT column1, column2 FROM table1; (selects only specified fields) or
   SELECT*FROM table1; (selects all the fields)
   SELECT 'Hello World' AS Result : Output is Result column with Hello World as a row.
DISTINCT:
   SELECT DISTINCT column1,cplumn2 FROM table1; : return only distinct (different) values.
   SELECT COUNT(DISTINCT column1,column2) FROM table1; :lists the number of distinct values 
   
WHERE:   
   SELECT column1,column2 FROM table1 WHERE value= 'A' or 1 ; :filters records, used to extract only those records that fulfill a specified condition. 
   Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!
   
AND, OR, and NOT Operators:
   SELECT column1, column2 From table1 WHERE value='A'AND value='B'AND value=1;
   SELECT column1, column2 From table1 WHERE value='A'OR value='B'OR value=1;
   SELECT column1, column2 From table1 WHERE NOT value='A';
   
Combining AND, OR, NOT (use parenthesis to form complex expressions)
   SELECT * FROM table1 WHERE/WHERE NOT column='A' AND (value=1 OR value=2)
   
ORDER BY Keyword: 
   Sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
   SELECT column1, column2 FROM table1 ORDER BY column1, column2 ASC/DESC;
   SELECT * FROM table1 ORDER BY Country, CostumerName;

Insert Into: 
   It is possible to write the INSERT INTO statement in two ways:
   1)Specify both the column names and the values to be inserted
     - INSERT INTO table1 (column1,column2...) VALUES (value1, value2...);
   2)If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query.However, 
     make sure the order of the values is in the same order as the columns in the table.
     - INSERT INTO table1 VALUES (value1, value2)
 
NULL Values:
   Test for NULL Values: use the IS NULL and IS NOT NULL operators.
   -IS NULL Syntex : SELECT column1 FROM table1 WHERE columne_name IS NULL;
   -IS NOT NULL Syntex :SELECT column1 FROM table1 WHERE columne_name IS NOT NULL;
 
UPDATE Statement:
   It is used to modify the existing records in a table. 
   Note : Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. 
   The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!
   - UPDATE table1 SET column1, column2 WHERE condition
   - UPDATE table1 SET name='x', age='Y' SET city='z'
   UPDATE Multiple Records:It is the WHERE clause that determines how many records will be updated.
   - Update table1 SET city='z' WHERE name='x'
   - UPDATE table1 SET city='z' #Updates all the records in table1
 
DELETE Statement:
   It is used to delete existing records in a table.
   Note:Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. 
   The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!
   - DELETE FROM table1 WHERE value=1/'A';
   - DELETE FROM table1; #delete all records
   
TOP, LIMIT, FETCH FIRST or ROWNUM Clause:
   It is used to specify the number of records to return.
   SELECT TOP number/percent column_name(s) FROM table1 WHERE condition:
   SELECT TOP 3 * FROM Customers;
   SELECT TOP 50 PERCENT * FROM table1 LIMIT 5(Gives first 10) OFFSET 5(Gives second 5 after ignoring first 10);
   SELECT TOP 3 * FROM Customers WHERE Country='x';
   
MIN() and MAX() Functions:
   SELECT MIN/MAX (column1) FROM table1 WHERE condition;
 
COUNT(), AVG() and SUM() Functions:
   SELECT COUNT(*) FROM table1 WHERE condition;
   SELECT AVG(column1) FROM table1 WHERE condition;
   SELECT SUM(column1) FROM table1 WHERE condition;
   
LIKE Operator
    It is used in a WHERE clause to search for a specified pattern in a column.
    SELECT column1 FROM table1 WHERE column LIKE pattern;
    
    Some examples showing different LIKE operators with '%' and '_' wildcards
    -WHERE CustomerName LIKE 'a%':Finds any values that start with "a";
    -WHERE CustomerName LIKE '%a':Finds any values that end with "a";
    -WHERE CustomerName LIKE '%or%':Finds any values that have "or" in any position;
    -WHERE CustomerName LIKE '_r%':Finds any values that have "r" in the second position;
    -WHERE CustomerName LIKE 'a_%':Finds any values that start with "a" and are at least 2 characters in length;
    -WHERE CustomerName LIKE 'a__%': Finds any values that start with "a" and are at least 3 characters in length;
    -WHERE ContactName LIKE 'a%o':Finds any values that start with "a" and ends with "o";

Wildcards
   It is used to substitute one or more characters in a string.
   
CREATE TABLE:
   CREATE TABLE test ( a INTEGER, b TEXT);
   INSERT INTO test VALUES (1, 'a');
   INSERT INTO test VALUES('2', 'b');
   
DROP TABLE:
  DROP TABLE table1;
  DROP TABLE IF EXISTS test;
  
Inserting rows:
  INSERT INTO table1 VALUES (1,'A', 'B');
  INSERT INTO table1 (column1, column2) VALUES ('A','B');
  INSERT INTO table DEFAULT VALUES;
  INSERT INTO table1 (column1, column2) SELECT name, id, description from item;
  SELECT * FROM test;

IN Operator:
  The IN operator allows you to specify multiple values in a WHERE clause.
  It is a shorthand for multiple OR conditions.
  SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...);
  or SELECT column_name(s) FROM table_name WHERE column_name IN (SELECT STATEMENT);
  
BETWEEN Operator:
  The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
  It is inclusive: begin and end values are included. 
  SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;
 
Aliases:
  SQL aliases are used to give a table, or a column in a table, a temporary name. It is created with the AS keyword.
  It is often used to make column names more readable. An alias only exists for the duration of that query.
  SELECT column_name AS alias_name FROM table_name; 
  EX: SELECT CustomerID AS ID, CustomerName AS Customer FROM Customers;
Alias for Tables Example:   
  SELECT o.OrderID, o.OrderDate, c.CustomerName
  FROM Customers AS c, Orders AS o
  WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID; 
   
JOINS:
  -(INNER) JOIN: Returns records that have matching values in both tables
   Syntex:
      SELECT column_name(s)
      FROM table1
      INNER JOIN table2
      ON table1.column_name = table2.column_name;
  -LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
      SELECT Customers.CustomerName, Orders.OrderID
      FROM Customers
      LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
      ORDER BY Customers.CustomerName;
  -RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
      SELECT column_name(s)
      FROM table1
      RIGHT JOIN table2
      ON table1.column_name = table2.column_name;
  -FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table
      SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 
      ON table1.column_name = table2.column_name WHERE condition;
   -SQL Self Join: A self join is a regular join, but the table is joined with itself.
      SELECT column_name(s) FROM table1 T1, table1 T2
      WHERE condition; T1 and T2 are different table aliases for the same table.
   
UNION Operator:
      The UNION operator is used to combine the result-set of two or more SELECT statements.
      - Every SELECT statement within UNION must have the same number of columns
      - The columns must also have similar data types
      - The columns in every SELECT statement must also be in the same order
   Syntex:
   SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;
   
   - UNION ALL Syntax:The UNION operator selects only distinct values by default. 
   To allow duplicate values, use UNION ALL:
   SELECT column_name(s) FROM table1 UNION ALL SELECT column_name(s) FROM table2;
   - UNION With WHERE
   SELECT City, Country FROM Customers WHERE Country='Germany' UNION
   SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;
   - Another UNION Example
   SELECT 'Customer' AS Type, ContactName, City, Country FROM Customers UNION
   SELECT 'Supplier', ContactName, City, Country FROM Suppliers;

GROUP BY Statement:
   SELECT column_name(s) FROM table_name WHERE condition
   GROUP BY column_name(s) ORDER BY column_name(s);
   
   
